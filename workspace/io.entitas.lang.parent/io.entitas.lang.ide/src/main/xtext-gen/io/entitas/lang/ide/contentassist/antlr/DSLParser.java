/*
 * generated by Xtext 2.11.0
 */
package io.entitas.lang.ide.contentassist.antlr;

import com.google.inject.Inject;
import io.entitas.lang.ide.contentassist.antlr.internal.InternalDSLParser;
import io.entitas.lang.services.DSLGrammarAccess;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class DSLParser extends AbstractContentAssistParser {

	@Inject
	private DSLGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalDSLParser createParser() {
		InternalDSLParser result = new InternalDSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getAliasAccess().getAlternatives_2(), "rule__Alias__Alternatives_2");
					put(grammarAccess.getComponentAccess().getAlternatives_4(), "rule__Component__Alternatives_4");
					put(grammarAccess.getSystemAccess().getAlternatives_3_4(), "rule__System__Alternatives_3_4");
					put(grammarAccess.getAccessRuleAccess().getAlternatives_2(), "rule__AccessRule__Alternatives_2");
					put(grammarAccess.getSystemParameterAccess().getAlternatives(), "rule__SystemParameter__Alternatives");
					put(grammarAccess.getTriggerRuleAccess().getAlternatives_0(), "rule__TriggerRule__Alternatives_0");
					put(grammarAccess.getValidIDAccess().getAlternatives(), "rule__ValidID__Alternatives");
					put(grammarAccess.getRootAccess().getGroup(), "rule__Root__Group__0");
					put(grammarAccess.getTargetAccess().getGroup(), "rule__Target__Group__0");
					put(grammarAccess.getTargetAccess().getGroup_1(), "rule__Target__Group_1__0");
					put(grammarAccess.getTargetIdAccess().getGroup(), "rule__TargetId__Group__0");
					put(grammarAccess.getTargetIdAccess().getGroup_1(), "rule__TargetId__Group_1__0");
					put(grammarAccess.getTargetParameterAccess().getGroup(), "rule__TargetParameter__Group__0");
					put(grammarAccess.getVersionAccess().getGroup(), "rule__Version__Group__0");
					put(grammarAccess.getVersionAccess().getGroup_2(), "rule__Version__Group_2__0");
					put(grammarAccess.getVersionAccess().getGroup_2_2(), "rule__Version__Group_2_2__0");
					put(grammarAccess.getNamespaceAccess().getGroup(), "rule__Namespace__Group__0");
					put(grammarAccess.getContextAccess().getGroup(), "rule__Context__Group__0");
					put(grammarAccess.getContextAccess().getGroup_1(), "rule__Context__Group_1__0");
					put(grammarAccess.getContextIdAccess().getGroup(), "rule__ContextId__Group__0");
					put(grammarAccess.getContextIdAccess().getGroup_1(), "rule__ContextId__Group_1__0");
					put(grammarAccess.getAliasAccess().getGroup(), "rule__Alias__Group__0");
					put(grammarAccess.getAliasRuleAccess().getGroup(), "rule__AliasRule__Group__0");
					put(grammarAccess.getSingleAliasAccess().getGroup(), "rule__SingleAlias__Group__0");
					put(grammarAccess.getComponentAccess().getGroup(), "rule__Component__Group__0");
					put(grammarAccess.getComponentAccess().getGroup_2(), "rule__Component__Group_2__0");
					put(grammarAccess.getComponentAccess().getGroup_2_1(), "rule__Component__Group_2_1__0");
					put(grammarAccess.getPropertyRulesAccess().getGroup(), "rule__PropertyRules__Group__0");
					put(grammarAccess.getPropertyPrefixAccess().getGroup(), "rule__PropertyPrefix__Group__0");
					put(grammarAccess.getContextScopesAccess().getGroup(), "rule__ContextScopes__Group__0");
					put(grammarAccess.getContextScopesAccess().getGroup_1(), "rule__ContextScopes__Group_1__0");
					put(grammarAccess.getSystemAccess().getGroup(), "rule__System__Group__0");
					put(grammarAccess.getSystemAccess().getGroup_2(), "rule__System__Group_2__0");
					put(grammarAccess.getSystemAccess().getGroup_2_1(), "rule__System__Group_2_1__0");
					put(grammarAccess.getSystemAccess().getGroup_3(), "rule__System__Group_3__0");
					put(grammarAccess.getSystemAccess().getGroup_3_3(), "rule__System__Group_3_3__0");
					put(grammarAccess.getSystemAccess().getGroup_3_4_1(), "rule__System__Group_3_4_1__0");
					put(grammarAccess.getSystemAccess().getGroup_4(), "rule__System__Group_4__0");
					put(grammarAccess.getAccessRuleAccess().getGroup(), "rule__AccessRule__Group__0");
					put(grammarAccess.getAccessRuleAccess().getGroup_2_0(), "rule__AccessRule__Group_2_0__0");
					put(grammarAccess.getTriggerRuleAccess().getGroup(), "rule__TriggerRule__Group__0");
					put(grammarAccess.getTriggerRuleAccess().getGroup_2(), "rule__TriggerRule__Group_2__0");
					put(grammarAccess.getMatcherRuleAccess().getGroup(), "rule__MatcherRule__Group__0");
					put(grammarAccess.getMatcherRuleAccess().getGroup_1(), "rule__MatcherRule__Group_1__0");
					put(grammarAccess.getMatcherRuleAccess().getGroup_1_2(), "rule__MatcherRule__Group_1_2__0");
					put(grammarAccess.getMatcherRuleAccess().getGroup_2(), "rule__MatcherRule__Group_2__0");
					put(grammarAccess.getMatcherRuleAccess().getGroup_2_2(), "rule__MatcherRule__Group_2_2__0");
					put(grammarAccess.getMatcherRuleAccess().getGroup_3(), "rule__MatcherRule__Group_3__0");
					put(grammarAccess.getMatcherRuleAccess().getGroup_3_2(), "rule__MatcherRule__Group_3_2__0");
					put(grammarAccess.getContextScopeAccess().getGroup(), "rule__ContextScope__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getRootAccess().getTargetAssignment_0(), "rule__Root__TargetAssignment_0");
					put(grammarAccess.getRootAccess().getNamespaceAssignment_1(), "rule__Root__NamespaceAssignment_1");
					put(grammarAccess.getRootAccess().getContextAssignment_2(), "rule__Root__ContextAssignment_2");
					put(grammarAccess.getRootAccess().getTypeAliasesAssignment_3(), "rule__Root__TypeAliasesAssignment_3");
					put(grammarAccess.getRootAccess().getComponentsAssignment_4(), "rule__Root__ComponentsAssignment_4");
					put(grammarAccess.getRootAccess().getSystemsAssignment_5(), "rule__Root__SystemsAssignment_5");
					put(grammarAccess.getTargetAccess().getIdsAssignment_1_0(), "rule__Target__IdsAssignment_1_0");
					put(grammarAccess.getTargetIdAccess().getNameAssignment_0(), "rule__TargetId__NameAssignment_0");
					put(grammarAccess.getTargetIdAccess().getParametersAssignment_1_1(), "rule__TargetId__ParametersAssignment_1_1");
					put(grammarAccess.getTargetIdAccess().getVersionAssignment_2(), "rule__TargetId__VersionAssignment_2");
					put(grammarAccess.getTargetParameterAccess().getPathAssignment_2(), "rule__TargetParameter__PathAssignment_2");
					put(grammarAccess.getVersionAccess().getMajorAssignment_1(), "rule__Version__MajorAssignment_1");
					put(grammarAccess.getVersionAccess().getMinorAssignment_2_1(), "rule__Version__MinorAssignment_2_1");
					put(grammarAccess.getVersionAccess().getPatchAssignment_2_2_1(), "rule__Version__PatchAssignment_2_2_1");
					put(grammarAccess.getNamespaceAccess().getNameAssignment_1(), "rule__Namespace__NameAssignment_1");
					put(grammarAccess.getContextAccess().getIdsAssignment_1_0(), "rule__Context__IdsAssignment_1_0");
					put(grammarAccess.getContextIdAccess().getNameAssignment_0(), "rule__ContextId__NameAssignment_0");
					put(grammarAccess.getContextIdAccess().getParametersAssignment_1_1(), "rule__ContextId__ParametersAssignment_1_1");
					put(grammarAccess.getAliasAccess().getNameAssignment_1(), "rule__Alias__NameAssignment_1");
					put(grammarAccess.getAliasAccess().getListOfAliasesAssignment_2_0(), "rule__Alias__ListOfAliasesAssignment_2_0");
					put(grammarAccess.getAliasAccess().getSingleAliasAssignment_2_1(), "rule__Alias__SingleAliasAssignment_2_1");
					put(grammarAccess.getAliasListAccess().getRulesAssignment(), "rule__AliasList__RulesAssignment");
					put(grammarAccess.getAliasRuleAccess().getTargetAssignment_0(), "rule__AliasRule__TargetAssignment_0");
					put(grammarAccess.getAliasRuleAccess().getTypeAliasAssignment_2(), "rule__AliasRule__TypeAliasAssignment_2");
					put(grammarAccess.getSingleAliasAccess().getTypeAliasAssignment_1(), "rule__SingleAlias__TypeAliasAssignment_1");
					put(grammarAccess.getComponentAccess().getNameAssignment_1(), "rule__Component__NameAssignment_1");
					put(grammarAccess.getComponentAccess().getParametersAssignment_2_1_0(), "rule__Component__ParametersAssignment_2_1_0");
					put(grammarAccess.getComponentAccess().getScopeAssignment_3(), "rule__Component__ScopeAssignment_3");
					put(grammarAccess.getComponentAccess().getListOfPropertiesAssignment_4_0(), "rule__Component__ListOfPropertiesAssignment_4_0");
					put(grammarAccess.getComponentAccess().getPropertyPrefixAssignment_4_1(), "rule__Component__PropertyPrefixAssignment_4_1");
					put(grammarAccess.getPropertyListAccess().getRulesAssignment(), "rule__PropertyList__RulesAssignment");
					put(grammarAccess.getPropertyRulesAccess().getNameAssignment_0(), "rule__PropertyRules__NameAssignment_0");
					put(grammarAccess.getPropertyRulesAccess().getAliasAssignment_2(), "rule__PropertyRules__AliasAssignment_2");
					put(grammarAccess.getPropertyPrefixAccess().getStringAssignment_2(), "rule__PropertyPrefix__StringAssignment_2");
					put(grammarAccess.getContextScopesAccess().getReferencesAssignment_1_0(), "rule__ContextScopes__ReferencesAssignment_1_0");
					put(grammarAccess.getSystemAccess().getNameAssignment_1(), "rule__System__NameAssignment_1");
					put(grammarAccess.getSystemAccess().getParametersAssignment_2_1_0(), "rule__System__ParametersAssignment_2_1_0");
					put(grammarAccess.getSystemAccess().getReactiveAssignment_3_0(), "rule__System__ReactiveAssignment_3_0");
					put(grammarAccess.getSystemAccess().getScopeAssignment_3_1(), "rule__System__ScopeAssignment_3_1");
					put(grammarAccess.getSystemAccess().getTriggerRulesAssignment_3_3_0(), "rule__System__TriggerRulesAssignment_3_3_0");
					put(grammarAccess.getSystemAccess().getNoFilterAssignment_3_4_0(), "rule__System__NoFilterAssignment_3_4_0");
					put(grammarAccess.getSystemAccess().getMatcherRulesAssignment_3_4_1_1(), "rule__System__MatcherRulesAssignment_3_4_1_1");
					put(grammarAccess.getSystemAccess().getAccessRulesAssignment_4_2(), "rule__System__AccessRulesAssignment_4_2");
					put(grammarAccess.getAccessRuleAccess().getNameAssignment_0(), "rule__AccessRule__NameAssignment_0");
					put(grammarAccess.getAccessRuleAccess().getMatcherRuleAssignment_2_0_0(), "rule__AccessRule__MatcherRuleAssignment_2_0_0");
					put(grammarAccess.getAccessRuleAccess().getScopeAssignment_2_0_1(), "rule__AccessRule__ScopeAssignment_2_0_1");
					put(grammarAccess.getAccessRuleAccess().getContextRefAssignment_2_1(), "rule__AccessRule__ContextRefAssignment_2_1");
					put(grammarAccess.getTriggerRuleAccess().getRemovedAssignment_0_0(), "rule__TriggerRule__RemovedAssignment_0_0");
					put(grammarAccess.getTriggerRuleAccess().getAddedAssignment_0_1(), "rule__TriggerRule__AddedAssignment_0_1");
					put(grammarAccess.getTriggerRuleAccess().getRemovedOrAddedAssignment_0_2(), "rule__TriggerRule__RemovedOrAddedAssignment_0_2");
					put(grammarAccess.getTriggerRuleAccess().getComponentsAssignment_2_0(), "rule__TriggerRule__ComponentsAssignment_2_0");
					put(grammarAccess.getMatcherRuleAccess().getAllComponentsAssignment_1_2_0(), "rule__MatcherRule__AllComponentsAssignment_1_2_0");
					put(grammarAccess.getMatcherRuleAccess().getAnyComponentsAssignment_2_2_0(), "rule__MatcherRule__AnyComponentsAssignment_2_2_0");
					put(grammarAccess.getMatcherRuleAccess().getNoneComponentsAssignment_3_2_0(), "rule__MatcherRule__NoneComponentsAssignment_3_2_0");
					put(grammarAccess.getContextScopeAccess().getReferenceAssignment_1(), "rule__ContextScope__ReferenceAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public DSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(DSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}

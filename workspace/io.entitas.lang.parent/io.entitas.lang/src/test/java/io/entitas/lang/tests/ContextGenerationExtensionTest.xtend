/*
 * generated by Xtext 2.11.0
 */
package io.entitas.lang.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.Assert
import org.junit.Test
import org.junit.runner.RunWith
import io.entitas.lang.dsl.Root
import static extension io.entitas.lang.generator.entitas_csharp.ContextGenerationExtension.*

@RunWith(XtextRunner)
@InjectWith(DSLInjectorProvider)
class ContextGenerationExtensionTest {
	@Inject
	ParseHelper<Root> parseHelper
	
	@Test
	def void entityClassGenerationt() {
		val result = parseHelper.parse('''
			target A
			context Core, Input, Map
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		
		Assert.assertEquals('''
		public sealed partial class CoreEntity : Entity {}
		public sealed partial class InputEntity : Entity {}
		public sealed partial class MapEntity : Entity {}
		'''.toString, 
		result.context.entityClassDefinitions.toString 
		)
	}
	
	@Test
	def void contextClassGenerationt() {
		val result = parseHelper.parse('''
			target A
			context Core, Input, Map
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		
		Assert.assertEquals('''
		public sealed partial class CoreContext : Context<CoreEntity> {
		
			public CoreContext() : base(
				CoreComponentsLookup.TotalComponents,
				0,
				new ContextInfo(
					"Core Context",
					CoreComponentsLookup.componentNames,
					CoreComponentsLookup.componentTypes
				)
			) {}
		}
		public sealed partial class InputContext : Context<InputEntity> {
		
			public InputContext() : base(
				InputComponentsLookup.TotalComponents,
				0,
				new ContextInfo(
					"Input Context",
					InputComponentsLookup.componentNames,
					InputComponentsLookup.componentTypes
				)
			) {}
		}
		public sealed partial class MapContext : Context<MapEntity> {
		
			public MapContext() : base(
				MapComponentsLookup.TotalComponents,
				0,
				new ContextInfo(
					"Map Context",
					MapComponentsLookup.componentNames,
					MapComponentsLookup.componentTypes
				)
			) {}
		}
		'''.toString, 
		result.context.contextClassDefinitions.toString 
		)
	}
	
	@Test
	def void contextsHelperClassGenerationt() {
		val result = parseHelper.parse('''
			target A
			context Core, Input, Map
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		
		Assert.assertEquals('''
		public partial class Contexts : IContexts {
		
			public static Contexts sharedInstance {
				get {
					if(_sharedInstance == null) {
						_sharedInstance = new Contexts();
					}
		
					return _sharedInstance;
				}
				set { _sharedInstance = value; }
			}
		
			static Contexts _sharedInstance;
		
			public static void CreateContextObserver(IContext context) {
		#if(!ENTITAS_DISABLE_VISUAL_DEBUGGING && UNITY_EDITOR)
				if(UnityEngine.Application.isPlaying) {
					var observer = new Entitas.Unity.VisualDebugging.ContextObserver(context);
					UnityEngine.Object.DontDestroyOnLoad(observer.gameObject);
				}
		#endif
			}
			public CoreContext core { get; set; }
			public InputContext input { get; set; }
			public MapContext map { get; set; }
		
			public IContext[] allContexts { get { return new IContext [] { core, input, map }; } }
		
			public virtual void SetAllContexts() {
				core = new CoreContext();
				input = new InputContext();
				map = new MapContext();
				
				CreateContextObserver(core);
				CreateContextObserver(input);
				CreateContextObserver(map);
			}
		}
		'''.toString, 
		result.context.contextsHelperClassDefinition.toString 
		)
	}
}

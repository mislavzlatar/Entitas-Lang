/*
 * generated by Xtext 2.11.0
 */
package io.entitas.lang.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.Assert
import org.junit.Test
import org.junit.runner.RunWith
import io.entitas.lang.dsl.Root
import static extension io.entitas.lang.extensions.SystemExtensions.*

@RunWith(XtextRunner)
@InjectWith(DSLInjectorProvider)
class SystemExtensionTest {
	@Inject
	ParseHelper<Root> parseHelper
	
	@Test
	def void typeNameImplicit() {
		val result = parseHelper.parse('''
			target A
			context Core
			comp Finished in Core
			sys My
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		
		Assert.assertEquals("MySystem", result.systems.get(0).systemTypeName)
	}
	
	@Test
	def void typeNameExplicit() {
		val result = parseHelper.parse('''
			target A
			context Core
			comp Finished in Core
			sys MySystem
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		
		Assert.assertEquals("MySystem", result.systems.get(0).systemTypeName)
	}
	
	@Test
	def void nameImplicit() {
		val result = parseHelper.parse('''
			target A
			context Core
			comp Finished in Core
			sys My
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		
		Assert.assertEquals("My", result.systems.get(0).systemName)
	}
	
	@Test
	def void nameExplicit() {
		val result = parseHelper.parse('''
			target A
			context Core
			comp Finished in Core
			sys MySystem
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		
		Assert.assertEquals("My", result.systems.get(0).systemName)
	}
	
	@Test
	def void isInitTrue() {
		val result = parseHelper.parse('''
			target A
			context Core
			comp Finished in Core
			sys MySystem (init)
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		
		Assert.assertEquals(true, result.systems.get(0).isInit)
	}
	
	@Test
	def void isInitFalse() {
		val result = parseHelper.parse('''
			target A
			context Core
			comp Finished in Core
			sys MySystem (cleanup)
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		
		Assert.assertEquals(false, result.systems.get(0).isInit)
	}
	
	@Test
	def void isInitAndCleanup() {
		val result = parseHelper.parse('''
			target A
			context Core
			comp Finished in Core
			sys MySystem (init, cleanup)
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		
		Assert.assertEquals(true, result.systems.get(0).isInit)
		Assert.assertEquals(true, result.systems.get(0).isCleanup)
	}
	
	@Test
	def void isInitAndCleanupAndTeardown() {
		val result = parseHelper.parse('''
			target A
			context Core
			comp Finished in Core
			sys MySystem (init, cleanup, teardown)
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		
		Assert.assertEquals(true, result.systems.get(0).isInit)
		Assert.assertEquals(true, result.systems.get(0).isCleanup)
		Assert.assertEquals(true, result.systems.get(0).isTeardown)
	}
	
	@Test
	def void isNotInitCleanupTeardown() {
		val result = parseHelper.parse('''
			target A
			context Core
			comp Finished in Core
			sys MySystem
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		
		Assert.assertEquals(false, result.systems.get(0).isInit)
		Assert.assertEquals(false, result.systems.get(0).isCleanup)
		Assert.assertEquals(false, result.systems.get(0).isTeardown)
	}
	
	@Test
	def void isReactive() {
		val result = parseHelper.parse('''
			target A
			context Core
			comp Finished in Core
			sys MySystem
				trigger: added(Finished)
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		
		Assert.assertEquals(true, result.systems.get(0).isReactive)
	}
	
	@Test
	def void triggerContextNameWithSimpleTriggerRule() {
		val result = parseHelper.parse('''
			target A
			context Core
			comp Finished in Core
			sys MySystem
				trigger: added(Finished)
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		
		Assert.assertEquals("Core", result.systems.get(0).triggerContextName("Core"))
	}
	
	@Test
	def void triggerContextNameWithOverlapingTriggerRule() {
		val result = parseHelper.parse('''
			target A
			context Core, Map
			comp Position in Core, Map
			comp Finished in Core
			sys MySystem
				trigger: added(Position, Finished)
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		
		Assert.assertEquals("Core", result.systems.get(0).triggerContextName("Core"))
	}
	
	@Test
	def void triggerContextNameWithAmbiguousTriggerRule() {
		val result = parseHelper.parse('''
			target A
			context Core, Map
			comp Position in Core, Map
			comp Finished in Core
			sys MySystem
				trigger: added(Position)
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		
		Assert.assertEquals(null, result.systems.get(0).triggerContextName("Core"))
	}
	
	@Test
	def void triggerContextNameWithAmbiguousTriggerRuleButExplicitScope() {
		val result = parseHelper.parse('''
			target A
			context Core, Map
			comp Position in Core, Map
			comp Finished in Core
			sys MySystem
				trigger in Map : added(Position)
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		
		Assert.assertEquals("Map", result.systems.get(0).triggerContextName("Core"))
	}
	
	@Test
	def void triggerContextNameWithAmbiguousTriggerRuleButExplicitFilter() {
		val result = parseHelper.parse('''
			target A
			context Core, Map
			comp Position in Core, Map
			comp Finished in Core
			sys MySystem
				trigger : 
					added(Position) 
					filter allOf(Position, Finished)
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		
		Assert.assertEquals("Core", result.systems.get(0).triggerContextName("Core"))
	}
	
	@Test
	def void triggerContextNameWithAmbiguousTriggerRuleButNotExplicitFilter() {
		val result = parseHelper.parse('''
			target A
			context Core, Map
			comp Position in Core, Map
			comp Finished in Core
			sys MySystem
				trigger : 
					added(Position) 
					filter allOf(Position)
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		
		Assert.assertEquals(null, result.systems.get(0).triggerContextName("Core"))
	}
	
	@Test
	def void interfaceToImplement() {
		val result = parseHelper.parse('''
			target A
			context Core
			comp Finished in Core
			sys My
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		
		Assert.assertEquals(newArrayList("IExecuteSystem"), result.systems.get(0).interfacesToImplement("Core"))
	}
	
	@Test
	def void multipleInterfacesToImplement() {
		val result = parseHelper.parse('''
			target A
			context Core
			comp Finished in Core
			sys My (init, cleanup, teardown)
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		
		Assert.assertEquals(newArrayList("IExecuteSystem", "IInitializeSystem", "ICleanupSystem", "ITearDownSystem"), result.systems.get(0).interfacesToImplement("Core"))
	}
	
	@Test
	def void multipleInterfacesToImplementAndReactive() {
		val result = parseHelper.parse('''
			target A
			context Core
			comp Finished in Core
			sys My (init, cleanup, teardown)
				trigger : added(Finished)
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		
		Assert.assertEquals(newArrayList("ReactiveSystem<CoreEntity>", "IInitializeSystem", "ICleanupSystem", "ITearDownSystem"), result.systems.get(0).interfacesToImplement("Core"))
	}
	
	@Test
	def void contextNameListFromAccess() {
		val result = parseHelper.parse('''
			target A
			context Core, Input, Map
			comp Move in Input
			comp A in Input
			comp B in Input
			sys Foo (explicit_context_list)
				access:
					mapCtx : Map
					inputCtx : Input
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		
		Assert.assertEquals(newArrayList("Input", "Map"), result.systems.get(0).contextNameList("Core"))
	}
	
	@Test
	def void contextNameListFromAccessAndGroup() {
		val result = parseHelper.parse('''
			target A
			context Core, Input, Map
			comp Move in Input
			comp A in Input
			comp B in Input
			comp C
			sys Foo (explicit_context_list)
				access:
					mapCtx : Map
					inputCtx : Input
					c : allOf(C)
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		
		Assert.assertEquals(newArrayList("Core", "Input", "Map"), result.systems.get(0).contextNameList("Core"))
	}
	
	@Test
	def void contextNameListFromAccessGroupAndTrigger() {
		val result = parseHelper.parse('''
			target A
			context Core, Input, Map
			comp Move in Input
			comp A in Input
			comp B in Input
			comp C
			sys Foo (explicit_context_list)
				trigger:
					added(A)
				access:
					mapCtx : Map
					c : allOf(C)
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		
		Assert.assertEquals(newArrayList("Core", "Input", "Map"), result.systems.get(0).contextNameList("Core"))
	}
}

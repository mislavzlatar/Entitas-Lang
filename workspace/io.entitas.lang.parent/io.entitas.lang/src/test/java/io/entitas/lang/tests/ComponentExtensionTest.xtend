/*
 * generated by Xtext 2.11.0
 */
package io.entitas.lang.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.Assert
import org.junit.Test
import org.junit.runner.RunWith
import io.entitas.lang.dsl.Root
import static extension io.entitas.lang.extensions.ComponentExtensions.*
import static extension io.entitas.lang.extensions.ContextExtensions.*

@RunWith(XtextRunner)
@InjectWith(DSLInjectorProvider)
class ComponentExtensionTest {
	@Inject
	ParseHelper<Root> parseHelper
	
	@Test
	def void componentTypeNameImplicit() {
		val result = parseHelper.parse('''
			target A
			context Core
			comp Finished in Core
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		
		Assert.assertEquals("FinishedComponent", result.components.get(0).componentTypeName)
	}
	
	@Test
	def void componentTypeNameExplicit() {
		val result = parseHelper.parse('''
			target A
			context Core
			comp FinishedComponent in Core
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		
		Assert.assertEquals("FinishedComponent", result.components.get(0).componentTypeName)
	}
	
	@Test
	def void componentTypeNameCapitalised() {
		val result = parseHelper.parse('''
			target A
			context Core
			comp finished in Core
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		
		Assert.assertEquals("FinishedComponent", result.components.get(0).componentTypeName)
	}
	
	@Test
	def void componentNameImplicit() {
		val result = parseHelper.parse('''
			target A
			context Core
			comp Finished in Core
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		
		Assert.assertEquals("Finished", result.components.get(0).componentName)
	}
	
	@Test
	def void componentNameExplicit() {
		val result = parseHelper.parse('''
			target A
			context Core
			comp FinishedComponent in Core
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		
		Assert.assertEquals("Finished", result.components.get(0).componentName)
	}
	
	@Test
	def void componentNameCapitalised() {
		val result = parseHelper.parse('''
			target A
			context Core
			comp finished in Core
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		
		Assert.assertEquals("Finished", result.components.get(0).componentName)
	}
	
	@Test
	def void componentIsFlag() {
		val result = parseHelper.parse('''
			target A
			context Core
			comp Finished in Core
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		
		Assert.assertEquals(true, result.components.get(0).isFlag)
	}
	
	@Test
	def void componentIsNotFlag() {
		val result = parseHelper.parse('''
			target A
			context Core
			alias int : "int"
			comp Finished in Core
				value : int
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		
		Assert.assertEquals(false, result.components.get(0).isFlag)
	}
	
	@Test
	def void componentIsUnique() {
		val result = parseHelper.parse('''
			target A
			context Core
			comp Finished(unique) in Core
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		
		Assert.assertEquals(true, result.components.get(0).isUnique)
	}
	
	@Test
	def void componentIsNotUnique() {
		val result = parseHelper.parse('''
			target A
			context Core
			comp Finished in Core
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		
		Assert.assertEquals(false, result.components.get(0).isUnique)
	}
	
	@Test
	def void contextNameListTakeDefault() {
		val result = parseHelper.parse('''
			target A
			context Core(default), Meta
			comp Finished
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		
		Assert.assertEquals("Core", result.components.get(0).contextNameList(result.context.defaultContextName).get(0))
	}
	
	@Test
	def void contextNameListTakeDefined() {
		val result = parseHelper.parse('''
			target A
			context Core, Meta
			comp Finished in Core
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		
		Assert.assertEquals("Core", result.components.get(0).contextNameList(result.context.defaultContextName).get(0))
	}
	
	@Test
	def void contextNameListMultiple() {
		val result = parseHelper.parse('''
			target A
			context Core, Meta, Input
			comp Finished in Core, Input
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		
		Assert.assertEquals("Core", result.components.get(0).contextNameList(result.context.defaultContextName).get(0))
		Assert.assertEquals("Input", result.components.get(0).contextNameList(result.context.defaultContextName).get(1))
	}
}

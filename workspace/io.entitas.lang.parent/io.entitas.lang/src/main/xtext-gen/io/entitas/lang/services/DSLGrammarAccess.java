/*
 * generated by Xtext 2.11.0
 */
package io.entitas.lang.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DSLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class RootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.entitas.lang.DSL.Root");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTargetAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTargetTargetParserRuleCall_0_0 = (RuleCall)cTargetAssignment_0.eContents().get(0);
		private final Assignment cNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNamespaceNamespaceParserRuleCall_1_0 = (RuleCall)cNamespaceAssignment_1.eContents().get(0);
		private final Assignment cContextAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContextContextParserRuleCall_2_0 = (RuleCall)cContextAssignment_2.eContents().get(0);
		private final Assignment cTypeAliasesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeAliasesAliasParserRuleCall_3_0 = (RuleCall)cTypeAliasesAssignment_3.eContents().get(0);
		private final Assignment cComponentsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cComponentsComponentParserRuleCall_4_0 = (RuleCall)cComponentsAssignment_4.eContents().get(0);
		private final Assignment cSystemsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSystemsSystemParserRuleCall_5_0 = (RuleCall)cSystemsAssignment_5.eContents().get(0);
		
		//Root:
		//	target=Target?
		//	namespace=Namespace?
		//	context=Context?
		//	typeAliases+=Alias*
		//	components+=Component*
		//	systems+=System*;
		@Override public ParserRule getRule() { return rule; }
		
		//target=Target? namespace=Namespace? context=Context? typeAliases+=Alias* components+=Component* systems+=System*
		public Group getGroup() { return cGroup; }
		
		//target=Target?
		public Assignment getTargetAssignment_0() { return cTargetAssignment_0; }
		
		//Target
		public RuleCall getTargetTargetParserRuleCall_0_0() { return cTargetTargetParserRuleCall_0_0; }
		
		//namespace=Namespace?
		public Assignment getNamespaceAssignment_1() { return cNamespaceAssignment_1; }
		
		//Namespace
		public RuleCall getNamespaceNamespaceParserRuleCall_1_0() { return cNamespaceNamespaceParserRuleCall_1_0; }
		
		//context=Context?
		public Assignment getContextAssignment_2() { return cContextAssignment_2; }
		
		//Context
		public RuleCall getContextContextParserRuleCall_2_0() { return cContextContextParserRuleCall_2_0; }
		
		//typeAliases+=Alias*
		public Assignment getTypeAliasesAssignment_3() { return cTypeAliasesAssignment_3; }
		
		//Alias
		public RuleCall getTypeAliasesAliasParserRuleCall_3_0() { return cTypeAliasesAliasParserRuleCall_3_0; }
		
		//components+=Component*
		public Assignment getComponentsAssignment_4() { return cComponentsAssignment_4; }
		
		//Component
		public RuleCall getComponentsComponentParserRuleCall_4_0() { return cComponentsComponentParserRuleCall_4_0; }
		
		//systems+=System*
		public Assignment getSystemsAssignment_5() { return cSystemsAssignment_5; }
		
		//System
		public RuleCall getSystemsSystemParserRuleCall_5_0() { return cSystemsSystemParserRuleCall_5_0; }
	}
	public class TargetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.entitas.lang.DSL.Target");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTargetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cIdsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cIdsTargetIdParserRuleCall_1_0_0 = (RuleCall)cIdsAssignment_1_0.eContents().get(0);
		private final Keyword cCommaKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//Target:
		//	'target' (ids+=TargetId ','?)+;
		@Override public ParserRule getRule() { return rule; }
		
		//'target' (ids+=TargetId ','?)+
		public Group getGroup() { return cGroup; }
		
		//'target'
		public Keyword getTargetKeyword_0() { return cTargetKeyword_0; }
		
		//(ids+=TargetId ','?)+
		public Group getGroup_1() { return cGroup_1; }
		
		//ids+=TargetId
		public Assignment getIdsAssignment_1_0() { return cIdsAssignment_1_0; }
		
		//TargetId
		public RuleCall getIdsTargetIdParserRuleCall_1_0_0() { return cIdsTargetIdParserRuleCall_1_0_0; }
		
		//','?
		public Keyword getCommaKeyword_1_1() { return cCommaKeyword_1_1; }
	}
	public class TargetIdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.entitas.lang.DSL.TargetId");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParametersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParametersTargetParameterParserRuleCall_1_1_0 = (RuleCall)cParametersAssignment_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cVersionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVersionVersionParserRuleCall_2_0 = (RuleCall)cVersionAssignment_2.eContents().get(0);
		
		//TargetId:
		//	name=ID ('(' parameters+=TargetParameter ','? ')')? version=Version?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ('(' parameters+=TargetParameter ','? ')')? version=Version?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//('(' parameters+=TargetParameter ','? ')')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//parameters+=TargetParameter
		public Assignment getParametersAssignment_1_1() { return cParametersAssignment_1_1; }
		
		//TargetParameter
		public RuleCall getParametersTargetParameterParserRuleCall_1_1_0() { return cParametersTargetParameterParserRuleCall_1_1_0; }
		
		//','?
		public Keyword getCommaKeyword_1_2() { return cCommaKeyword_1_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
		
		//version=Version?
		public Assignment getVersionAssignment_2() { return cVersionAssignment_2; }
		
		//Version
		public RuleCall getVersionVersionParserRuleCall_2_0() { return cVersionVersionParserRuleCall_2_0; }
	}
	public class TargetParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.entitas.lang.DSL.TargetParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGen_pathKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPathAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPathSTRINGTerminalRuleCall_2_0 = (RuleCall)cPathAssignment_2.eContents().get(0);
		
		//TargetParameter:
		//	'gen_path' ':' path=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'gen_path' ':' path=STRING
		public Group getGroup() { return cGroup; }
		
		//'gen_path'
		public Keyword getGen_pathKeyword_0() { return cGen_pathKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//path=STRING
		public Assignment getPathAssignment_2() { return cPathAssignment_2; }
		
		//STRING
		public RuleCall getPathSTRINGTerminalRuleCall_2_0() { return cPathSTRINGTerminalRuleCall_2_0; }
	}
	public class VersionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.entitas.lang.DSL.Version");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVersionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cMajorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMajorINTTerminalRuleCall_1_0 = (RuleCall)cMajorAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cMinorAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cMinorINTTerminalRuleCall_2_1_0 = (RuleCall)cMinorAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cFullStopKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cPatchAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cPatchINTTerminalRuleCall_2_2_1_0 = (RuleCall)cPatchAssignment_2_2_1.eContents().get(0);
		
		//Version:
		//	{Version} major=INT ('.' minor=INT ('.' patch=INT)?)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Version} major=INT ('.' minor=INT ('.' patch=INT)?)?
		public Group getGroup() { return cGroup; }
		
		//{Version}
		public Action getVersionAction_0() { return cVersionAction_0; }
		
		//major=INT
		public Assignment getMajorAssignment_1() { return cMajorAssignment_1; }
		
		//INT
		public RuleCall getMajorINTTerminalRuleCall_1_0() { return cMajorINTTerminalRuleCall_1_0; }
		
		//('.' minor=INT ('.' patch=INT)?)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'.'
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }
		
		//minor=INT
		public Assignment getMinorAssignment_2_1() { return cMinorAssignment_2_1; }
		
		//INT
		public RuleCall getMinorINTTerminalRuleCall_2_1_0() { return cMinorINTTerminalRuleCall_2_1_0; }
		
		//('.' patch=INT)?
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//'.'
		public Keyword getFullStopKeyword_2_2_0() { return cFullStopKeyword_2_2_0; }
		
		//patch=INT
		public Assignment getPatchAssignment_2_2_1() { return cPatchAssignment_2_2_1; }
		
		//INT
		public RuleCall getPatchINTTerminalRuleCall_2_2_1_0() { return cPatchINTTerminalRuleCall_2_2_1_0; }
	}
	public class NamespaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.entitas.lang.DSL.Namespace");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNamespaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Namespace:
		//	'namespace' name=QualifiedName;
		@Override public ParserRule getRule() { return rule; }
		
		//'namespace' name=QualifiedName
		public Group getGroup() { return cGroup; }
		
		//'namespace'
		public Keyword getNamespaceKeyword_0() { return cNamespaceKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
	}
	public class ContextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.entitas.lang.DSL.Context");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cIdsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cIdsContextIdParserRuleCall_1_0_0 = (RuleCall)cIdsAssignment_1_0.eContents().get(0);
		private final Keyword cCommaKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//Context:
		//	'context' (ids+=ContextId ','?)+;
		@Override public ParserRule getRule() { return rule; }
		
		//'context' (ids+=ContextId ','?)+
		public Group getGroup() { return cGroup; }
		
		//'context'
		public Keyword getContextKeyword_0() { return cContextKeyword_0; }
		
		//(ids+=ContextId ','?)+
		public Group getGroup_1() { return cGroup_1; }
		
		//ids+=ContextId
		public Assignment getIdsAssignment_1_0() { return cIdsAssignment_1_0; }
		
		//ContextId
		public RuleCall getIdsContextIdParserRuleCall_1_0_0() { return cIdsContextIdParserRuleCall_1_0_0; }
		
		//','?
		public Keyword getCommaKeyword_1_1() { return cCommaKeyword_1_1; }
	}
	public class ContextIdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.entitas.lang.DSL.ContextId");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParametersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParametersContextParameterParserRuleCall_1_1_0 = (RuleCall)cParametersAssignment_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//ContextId:
		//	name=ID ('(' parameters+=ContextParameter ','? ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ('(' parameters+=ContextParameter ','? ')')?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//('(' parameters+=ContextParameter ','? ')')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//parameters+=ContextParameter
		public Assignment getParametersAssignment_1_1() { return cParametersAssignment_1_1; }
		
		//ContextParameter
		public RuleCall getParametersContextParameterParserRuleCall_1_1_0() { return cParametersContextParameterParserRuleCall_1_1_0; }
		
		//','?
		public Keyword getCommaKeyword_1_2() { return cCommaKeyword_1_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}
	public class ContextParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.entitas.lang.DSL.ContextParameter");
		private final Keyword cDefaultKeyword = (Keyword)rule.eContents().get(1);
		
		//ContextParameter:
		//	'default';
		@Override public ParserRule getRule() { return rule; }
		
		//'default'
		public Keyword getDefaultKeyword() { return cDefaultKeyword; }
	}
	public class AliasElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.entitas.lang.DSL.Alias");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAliasKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cListOfAliasesAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cListOfAliasesAliasListParserRuleCall_2_0_0 = (RuleCall)cListOfAliasesAssignment_2_0.eContents().get(0);
		private final Assignment cSingleAliasAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cSingleAliasSingleAliasParserRuleCall_2_1_0 = (RuleCall)cSingleAliasAssignment_2_1.eContents().get(0);
		
		//Alias:
		//	'alias' name=ID (listOfAliases=AliasList | singleAlias=SingleAlias);
		@Override public ParserRule getRule() { return rule; }
		
		//'alias' name=ID (listOfAliases=AliasList | singleAlias=SingleAlias)
		public Group getGroup() { return cGroup; }
		
		//'alias'
		public Keyword getAliasKeyword_0() { return cAliasKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//listOfAliases=AliasList | singleAlias=SingleAlias
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//listOfAliases=AliasList
		public Assignment getListOfAliasesAssignment_2_0() { return cListOfAliasesAssignment_2_0; }
		
		//AliasList
		public RuleCall getListOfAliasesAliasListParserRuleCall_2_0_0() { return cListOfAliasesAliasListParserRuleCall_2_0_0; }
		
		//singleAlias=SingleAlias
		public Assignment getSingleAliasAssignment_2_1() { return cSingleAliasAssignment_2_1; }
		
		//SingleAlias
		public RuleCall getSingleAliasSingleAliasParserRuleCall_2_1_0() { return cSingleAliasSingleAliasParserRuleCall_2_1_0; }
	}
	public class AliasListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.entitas.lang.DSL.AliasList");
		private final Assignment cRulesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cRulesAliasRuleParserRuleCall_0 = (RuleCall)cRulesAssignment.eContents().get(0);
		
		//AliasList:
		//	rules+=AliasRule+;
		@Override public ParserRule getRule() { return rule; }
		
		//rules+=AliasRule+
		public Assignment getRulesAssignment() { return cRulesAssignment; }
		
		//AliasRule
		public RuleCall getRulesAliasRuleParserRuleCall_0() { return cRulesAliasRuleParserRuleCall_0; }
	}
	public class AliasRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.entitas.lang.DSL.AliasRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTargetAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTargetTargetIdCrossReference_0_0 = (CrossReference)cTargetAssignment_0.eContents().get(0);
		private final RuleCall cTargetTargetIdIDTerminalRuleCall_0_0_1 = (RuleCall)cTargetTargetIdCrossReference_0_0.eContents().get(1);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAliasAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeAliasSTRINGTerminalRuleCall_2_0 = (RuleCall)cTypeAliasAssignment_2.eContents().get(0);
		
		//AliasRule:
		//	target=[TargetId] ':' typeAlias=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//target=[TargetId] ':' typeAlias=STRING
		public Group getGroup() { return cGroup; }
		
		//target=[TargetId]
		public Assignment getTargetAssignment_0() { return cTargetAssignment_0; }
		
		//[TargetId]
		public CrossReference getTargetTargetIdCrossReference_0_0() { return cTargetTargetIdCrossReference_0_0; }
		
		//ID
		public RuleCall getTargetTargetIdIDTerminalRuleCall_0_0_1() { return cTargetTargetIdIDTerminalRuleCall_0_0_1; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//typeAlias=STRING
		public Assignment getTypeAliasAssignment_2() { return cTypeAliasAssignment_2; }
		
		//STRING
		public RuleCall getTypeAliasSTRINGTerminalRuleCall_2_0() { return cTypeAliasSTRINGTerminalRuleCall_2_0; }
	}
	public class SingleAliasElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.entitas.lang.DSL.SingleAlias");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAliasAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeAliasSTRINGTerminalRuleCall_1_0 = (RuleCall)cTypeAliasAssignment_1.eContents().get(0);
		
		//SingleAlias:
		//	':' typeAlias=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//':' typeAlias=STRING
		public Group getGroup() { return cGroup; }
		
		//':'
		public Keyword getColonKeyword_0() { return cColonKeyword_0; }
		
		//typeAlias=STRING
		public Assignment getTypeAliasAssignment_1() { return cTypeAliasAssignment_1; }
		
		//STRING
		public RuleCall getTypeAliasSTRINGTerminalRuleCall_1_0() { return cTypeAliasSTRINGTerminalRuleCall_1_0; }
	}
	public class ComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.entitas.lang.DSL.Component");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCompKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cParametersAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cParametersComponentParameterParserRuleCall_2_1_0_0 = (RuleCall)cParametersAssignment_2_1_0.eContents().get(0);
		private final Keyword cCommaKeyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cScopeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cScopeContextScopesParserRuleCall_3_0 = (RuleCall)cScopeAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cListOfPropertiesAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cListOfPropertiesPropertyListParserRuleCall_4_0_0 = (RuleCall)cListOfPropertiesAssignment_4_0.eContents().get(0);
		private final Assignment cPropertyPrefixAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cPropertyPrefixPropertyPrefixParserRuleCall_4_1_0 = (RuleCall)cPropertyPrefixAssignment_4_1.eContents().get(0);
		
		//Component:
		//	'comp' name=ValidID ('(' (parameters+=ComponentParameter ','?)+ ')')? scope=ContextScopes?
		//	(listOfProperties=PropertyList | propertyPrefix=PropertyPrefix)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'comp' name=ValidID ('(' (parameters+=ComponentParameter ','?)+ ')')? scope=ContextScopes?
		//(listOfProperties=PropertyList | propertyPrefix=PropertyPrefix)?
		public Group getGroup() { return cGroup; }
		
		//'comp'
		public Keyword getCompKeyword_0() { return cCompKeyword_0; }
		
		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }
		
		//('(' (parameters+=ComponentParameter ','?)+ ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//(parameters+=ComponentParameter ','?)+
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//parameters+=ComponentParameter
		public Assignment getParametersAssignment_2_1_0() { return cParametersAssignment_2_1_0; }
		
		//ComponentParameter
		public RuleCall getParametersComponentParameterParserRuleCall_2_1_0_0() { return cParametersComponentParameterParserRuleCall_2_1_0_0; }
		
		//','?
		public Keyword getCommaKeyword_2_1_1() { return cCommaKeyword_2_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
		
		//scope=ContextScopes?
		public Assignment getScopeAssignment_3() { return cScopeAssignment_3; }
		
		//ContextScopes
		public RuleCall getScopeContextScopesParserRuleCall_3_0() { return cScopeContextScopesParserRuleCall_3_0; }
		
		//(listOfProperties=PropertyList | propertyPrefix=PropertyPrefix)?
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//listOfProperties=PropertyList
		public Assignment getListOfPropertiesAssignment_4_0() { return cListOfPropertiesAssignment_4_0; }
		
		//PropertyList
		public RuleCall getListOfPropertiesPropertyListParserRuleCall_4_0_0() { return cListOfPropertiesPropertyListParserRuleCall_4_0_0; }
		
		//propertyPrefix=PropertyPrefix
		public Assignment getPropertyPrefixAssignment_4_1() { return cPropertyPrefixAssignment_4_1; }
		
		//PropertyPrefix
		public RuleCall getPropertyPrefixPropertyPrefixParserRuleCall_4_1_0() { return cPropertyPrefixPropertyPrefixParserRuleCall_4_1_0; }
	}
	public class PropertyListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.entitas.lang.DSL.PropertyList");
		private final Assignment cRulesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cRulesPropertyRulesParserRuleCall_0 = (RuleCall)cRulesAssignment.eContents().get(0);
		
		//PropertyList:
		//	rules+=PropertyRules+;
		@Override public ParserRule getRule() { return rule; }
		
		//rules+=PropertyRules+
		public Assignment getRulesAssignment() { return cRulesAssignment; }
		
		//PropertyRules
		public RuleCall getRulesPropertyRulesParserRuleCall_0() { return cRulesPropertyRulesParserRuleCall_0; }
	}
	public class PropertyRulesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.entitas.lang.DSL.PropertyRules");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAliasAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cAliasAliasCrossReference_2_0 = (CrossReference)cAliasAssignment_2.eContents().get(0);
		private final RuleCall cAliasAliasIDTerminalRuleCall_2_0_1 = (RuleCall)cAliasAliasCrossReference_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//PropertyRules:
		//	name=ID ':' alias=[Alias] ','?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' alias=[Alias] ','?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//alias=[Alias]
		public Assignment getAliasAssignment_2() { return cAliasAssignment_2; }
		
		//[Alias]
		public CrossReference getAliasAliasCrossReference_2_0() { return cAliasAliasCrossReference_2_0; }
		
		//ID
		public RuleCall getAliasAliasIDTerminalRuleCall_2_0_1() { return cAliasAliasIDTerminalRuleCall_2_0_1; }
		
		//','?
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
	}
	public class PropertyPrefixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.entitas.lang.DSL.PropertyPrefix");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrefixKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStringAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStringSTRINGTerminalRuleCall_2_0 = (RuleCall)cStringAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//PropertyPrefix:
		//	'prefix' '(' string=STRING ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'prefix' '(' string=STRING ')'
		public Group getGroup() { return cGroup; }
		
		//'prefix'
		public Keyword getPrefixKeyword_0() { return cPrefixKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//string=STRING
		public Assignment getStringAssignment_2() { return cStringAssignment_2; }
		
		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_2_0() { return cStringSTRINGTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ComponentParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.entitas.lang.DSL.ComponentParameter");
		private final Keyword cUniqueKeyword = (Keyword)rule.eContents().get(1);
		
		//ComponentParameter:
		//	'unique';
		@Override public ParserRule getRule() { return rule; }
		
		//'unique'
		public Keyword getUniqueKeyword() { return cUniqueKeyword; }
	}
	public class ContextScopesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.entitas.lang.DSL.ContextScopes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cReferencesAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final CrossReference cReferencesContextIdCrossReference_1_0_0 = (CrossReference)cReferencesAssignment_1_0.eContents().get(0);
		private final RuleCall cReferencesContextIdIDTerminalRuleCall_1_0_0_1 = (RuleCall)cReferencesContextIdCrossReference_1_0_0.eContents().get(1);
		private final Keyword cCommaKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//ContextScopes:
		//	'in' (references+=[ContextId] ','?)+;
		@Override public ParserRule getRule() { return rule; }
		
		//'in' (references+=[ContextId] ','?)+
		public Group getGroup() { return cGroup; }
		
		//'in'
		public Keyword getInKeyword_0() { return cInKeyword_0; }
		
		//(references+=[ContextId] ','?)+
		public Group getGroup_1() { return cGroup_1; }
		
		//references+=[ContextId]
		public Assignment getReferencesAssignment_1_0() { return cReferencesAssignment_1_0; }
		
		//[ContextId]
		public CrossReference getReferencesContextIdCrossReference_1_0_0() { return cReferencesContextIdCrossReference_1_0_0; }
		
		//ID
		public RuleCall getReferencesContextIdIDTerminalRuleCall_1_0_0_1() { return cReferencesContextIdIDTerminalRuleCall_1_0_0_1; }
		
		//','?
		public Keyword getCommaKeyword_1_1() { return cCommaKeyword_1_1; }
	}
	public class SystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.entitas.lang.DSL.System");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSysKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cParametersAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cParametersSystemParameterParserRuleCall_2_1_0_0 = (RuleCall)cParametersAssignment_2_1_0.eContents().get(0);
		private final Keyword cCommaKeyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cReactiveAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cReactiveTriggerKeyword_3_0_0 = (Keyword)cReactiveAssignment_3_0.eContents().get(0);
		private final Assignment cScopeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cScopeContextScopeParserRuleCall_3_1_0 = (RuleCall)cScopeAssignment_3_1.eContents().get(0);
		private final Keyword cColonKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Assignment cTriggerRulesAssignment_3_3_0 = (Assignment)cGroup_3_3.eContents().get(0);
		private final RuleCall cTriggerRulesTriggerRuleParserRuleCall_3_3_0_0 = (RuleCall)cTriggerRulesAssignment_3_3_0.eContents().get(0);
		private final Keyword cCommaKeyword_3_3_1 = (Keyword)cGroup_3_3.eContents().get(1);
		private final Alternatives cAlternatives_3_4 = (Alternatives)cGroup_3.eContents().get(4);
		private final Assignment cNoFilterAssignment_3_4_0 = (Assignment)cAlternatives_3_4.eContents().get(0);
		private final Keyword cNoFilterNoFilterKeyword_3_4_0_0 = (Keyword)cNoFilterAssignment_3_4_0.eContents().get(0);
		private final Group cGroup_3_4_1 = (Group)cAlternatives_3_4.eContents().get(1);
		private final Keyword cFilterKeyword_3_4_1_0 = (Keyword)cGroup_3_4_1.eContents().get(0);
		private final Assignment cMatcherRulesAssignment_3_4_1_1 = (Assignment)cGroup_3_4_1.eContents().get(1);
		private final RuleCall cMatcherRulesMatcherRuleParserRuleCall_3_4_1_1_0 = (RuleCall)cMatcherRulesAssignment_3_4_1_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cAccessKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cColonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cAccessRulesAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cAccessRulesAccessRuleParserRuleCall_4_2_0 = (RuleCall)cAccessRulesAssignment_4_2.eContents().get(0);
		
		//System:
		//	'sys' name=ID ('(' (parameters+=SystemParameter ','?)+ ')')? (reactive?='trigger' scope=ContextScope? ':'
		//	(triggerRules+=TriggerRule ','?)+ (noFilter?='noFilter' |
		//	'filter' matcherRules=MatcherRule)?)? ('access' ':'
		//	accessRules+=AccessRule+)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'sys' name=ID ('(' (parameters+=SystemParameter ','?)+ ')')? (reactive?='trigger' scope=ContextScope? ':'
		//(triggerRules+=TriggerRule ','?)+ (noFilter?='noFilter' | 'filter' matcherRules=MatcherRule)?)? ('access' ':'
		//accessRules+=AccessRule+)?
		public Group getGroup() { return cGroup; }
		
		//'sys'
		public Keyword getSysKeyword_0() { return cSysKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('(' (parameters+=SystemParameter ','?)+ ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//(parameters+=SystemParameter ','?)+
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//parameters+=SystemParameter
		public Assignment getParametersAssignment_2_1_0() { return cParametersAssignment_2_1_0; }
		
		//SystemParameter
		public RuleCall getParametersSystemParameterParserRuleCall_2_1_0_0() { return cParametersSystemParameterParserRuleCall_2_1_0_0; }
		
		//','?
		public Keyword getCommaKeyword_2_1_1() { return cCommaKeyword_2_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
		
		//(reactive?='trigger' scope=ContextScope? ':' (triggerRules+=TriggerRule ','?)+ (noFilter?='noFilter' | 'filter'
		//matcherRules=MatcherRule)?)?
		public Group getGroup_3() { return cGroup_3; }
		
		//reactive?='trigger'
		public Assignment getReactiveAssignment_3_0() { return cReactiveAssignment_3_0; }
		
		//'trigger'
		public Keyword getReactiveTriggerKeyword_3_0_0() { return cReactiveTriggerKeyword_3_0_0; }
		
		//scope=ContextScope?
		public Assignment getScopeAssignment_3_1() { return cScopeAssignment_3_1; }
		
		//ContextScope
		public RuleCall getScopeContextScopeParserRuleCall_3_1_0() { return cScopeContextScopeParserRuleCall_3_1_0; }
		
		//':'
		public Keyword getColonKeyword_3_2() { return cColonKeyword_3_2; }
		
		//(triggerRules+=TriggerRule ','?)+
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//triggerRules+=TriggerRule
		public Assignment getTriggerRulesAssignment_3_3_0() { return cTriggerRulesAssignment_3_3_0; }
		
		//TriggerRule
		public RuleCall getTriggerRulesTriggerRuleParserRuleCall_3_3_0_0() { return cTriggerRulesTriggerRuleParserRuleCall_3_3_0_0; }
		
		//','?
		public Keyword getCommaKeyword_3_3_1() { return cCommaKeyword_3_3_1; }
		
		//(noFilter?='noFilter' | 'filter' matcherRules=MatcherRule)?
		public Alternatives getAlternatives_3_4() { return cAlternatives_3_4; }
		
		//noFilter?='noFilter'
		public Assignment getNoFilterAssignment_3_4_0() { return cNoFilterAssignment_3_4_0; }
		
		//'noFilter'
		public Keyword getNoFilterNoFilterKeyword_3_4_0_0() { return cNoFilterNoFilterKeyword_3_4_0_0; }
		
		//'filter' matcherRules=MatcherRule
		public Group getGroup_3_4_1() { return cGroup_3_4_1; }
		
		//'filter'
		public Keyword getFilterKeyword_3_4_1_0() { return cFilterKeyword_3_4_1_0; }
		
		//matcherRules=MatcherRule
		public Assignment getMatcherRulesAssignment_3_4_1_1() { return cMatcherRulesAssignment_3_4_1_1; }
		
		//MatcherRule
		public RuleCall getMatcherRulesMatcherRuleParserRuleCall_3_4_1_1_0() { return cMatcherRulesMatcherRuleParserRuleCall_3_4_1_1_0; }
		
		//('access' ':' accessRules+=AccessRule+)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'access'
		public Keyword getAccessKeyword_4_0() { return cAccessKeyword_4_0; }
		
		//':'
		public Keyword getColonKeyword_4_1() { return cColonKeyword_4_1; }
		
		//accessRules+=AccessRule+
		public Assignment getAccessRulesAssignment_4_2() { return cAccessRulesAssignment_4_2; }
		
		//AccessRule
		public RuleCall getAccessRulesAccessRuleParserRuleCall_4_2_0() { return cAccessRulesAccessRuleParserRuleCall_4_2_0; }
	}
	public class AccessRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.entitas.lang.DSL.AccessRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cMatcherRuleAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final RuleCall cMatcherRuleMatcherRuleParserRuleCall_2_0_0_0 = (RuleCall)cMatcherRuleAssignment_2_0_0.eContents().get(0);
		private final Assignment cScopeAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cScopeContextScopeParserRuleCall_2_0_1_0 = (RuleCall)cScopeAssignment_2_0_1.eContents().get(0);
		private final Assignment cContextRefAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final CrossReference cContextRefContextIdCrossReference_2_1_0 = (CrossReference)cContextRefAssignment_2_1.eContents().get(0);
		private final RuleCall cContextRefContextIdIDTerminalRuleCall_2_1_0_1 = (RuleCall)cContextRefContextIdCrossReference_2_1_0.eContents().get(1);
		
		//AccessRule:
		//	name=ID ':' (matcherRule=MatcherRule scope=ContextScope? | contextRef=[ContextId]);
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' (matcherRule=MatcherRule scope=ContextScope? | contextRef=[ContextId])
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//matcherRule=MatcherRule scope=ContextScope? | contextRef=[ContextId]
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//matcherRule=MatcherRule scope=ContextScope?
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//matcherRule=MatcherRule
		public Assignment getMatcherRuleAssignment_2_0_0() { return cMatcherRuleAssignment_2_0_0; }
		
		//MatcherRule
		public RuleCall getMatcherRuleMatcherRuleParserRuleCall_2_0_0_0() { return cMatcherRuleMatcherRuleParserRuleCall_2_0_0_0; }
		
		//scope=ContextScope?
		public Assignment getScopeAssignment_2_0_1() { return cScopeAssignment_2_0_1; }
		
		//ContextScope
		public RuleCall getScopeContextScopeParserRuleCall_2_0_1_0() { return cScopeContextScopeParserRuleCall_2_0_1_0; }
		
		//contextRef=[ContextId]
		public Assignment getContextRefAssignment_2_1() { return cContextRefAssignment_2_1; }
		
		//[ContextId]
		public CrossReference getContextRefContextIdCrossReference_2_1_0() { return cContextRefContextIdCrossReference_2_1_0; }
		
		//ID
		public RuleCall getContextRefContextIdIDTerminalRuleCall_2_1_0_1() { return cContextRefContextIdIDTerminalRuleCall_2_1_0_1; }
	}
	public class SystemParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.entitas.lang.DSL.SystemParameter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cInitKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cCleanupKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cTeardownKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cNo_execKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cExplicit_context_listKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//SystemParameter:
		//	'init' | 'cleanup' | 'teardown' | 'no_exec' | 'explicit_context_list';
		@Override public ParserRule getRule() { return rule; }
		
		//'init' | 'cleanup' | 'teardown' | 'no_exec' | 'explicit_context_list'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'init'
		public Keyword getInitKeyword_0() { return cInitKeyword_0; }
		
		//'cleanup'
		public Keyword getCleanupKeyword_1() { return cCleanupKeyword_1; }
		
		//'teardown'
		public Keyword getTeardownKeyword_2() { return cTeardownKeyword_2; }
		
		//'no_exec'
		public Keyword getNo_execKeyword_3() { return cNo_execKeyword_3; }
		
		//'explicit_context_list'
		public Keyword getExplicit_context_listKeyword_4() { return cExplicit_context_listKeyword_4; }
	}
	public class TriggerRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.entitas.lang.DSL.TriggerRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cRemovedAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cRemovedRemovedKeyword_0_0_0 = (Keyword)cRemovedAssignment_0_0.eContents().get(0);
		private final Assignment cAddedAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cAddedAddedKeyword_0_1_0 = (Keyword)cAddedAssignment_0_1.eContents().get(0);
		private final Assignment cRemovedOrAddedAssignment_0_2 = (Assignment)cAlternatives_0.eContents().get(2);
		private final Keyword cRemovedOrAddedRemovedOrAddedKeyword_0_2_0 = (Keyword)cRemovedOrAddedAssignment_0_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cComponentsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final CrossReference cComponentsComponentCrossReference_2_0_0 = (CrossReference)cComponentsAssignment_2_0.eContents().get(0);
		private final RuleCall cComponentsComponentIDTerminalRuleCall_2_0_0_1 = (RuleCall)cComponentsComponentCrossReference_2_0_0.eContents().get(1);
		private final Keyword cCommaKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//TriggerRule:
		//	(removed?='removed' | added?='added' | removedOrAdded?='removedOrAdded') '(' (components+=[Component] ','?)+ ')';
		@Override public ParserRule getRule() { return rule; }
		
		//(removed?='removed' | added?='added' | removedOrAdded?='removedOrAdded') '(' (components+=[Component] ','?)+ ')'
		public Group getGroup() { return cGroup; }
		
		//removed?='removed' | added?='added' | removedOrAdded?='removedOrAdded'
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//removed?='removed'
		public Assignment getRemovedAssignment_0_0() { return cRemovedAssignment_0_0; }
		
		//'removed'
		public Keyword getRemovedRemovedKeyword_0_0_0() { return cRemovedRemovedKeyword_0_0_0; }
		
		//added?='added'
		public Assignment getAddedAssignment_0_1() { return cAddedAssignment_0_1; }
		
		//'added'
		public Keyword getAddedAddedKeyword_0_1_0() { return cAddedAddedKeyword_0_1_0; }
		
		//removedOrAdded?='removedOrAdded'
		public Assignment getRemovedOrAddedAssignment_0_2() { return cRemovedOrAddedAssignment_0_2; }
		
		//'removedOrAdded'
		public Keyword getRemovedOrAddedRemovedOrAddedKeyword_0_2_0() { return cRemovedOrAddedRemovedOrAddedKeyword_0_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(components+=[Component] ','?)+
		public Group getGroup_2() { return cGroup_2; }
		
		//components+=[Component]
		public Assignment getComponentsAssignment_2_0() { return cComponentsAssignment_2_0; }
		
		//[Component]
		public CrossReference getComponentsComponentCrossReference_2_0_0() { return cComponentsComponentCrossReference_2_0_0; }
		
		//ID
		public RuleCall getComponentsComponentIDTerminalRuleCall_2_0_0_1() { return cComponentsComponentIDTerminalRuleCall_2_0_0_1; }
		
		//','?
		public Keyword getCommaKeyword_2_1() { return cCommaKeyword_2_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class MatcherRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.entitas.lang.DSL.MatcherRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMatcherRuleAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAllOfKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Assignment cAllComponentsAssignment_1_2_0 = (Assignment)cGroup_1_2.eContents().get(0);
		private final CrossReference cAllComponentsComponentCrossReference_1_2_0_0 = (CrossReference)cAllComponentsAssignment_1_2_0.eContents().get(0);
		private final RuleCall cAllComponentsComponentIDTerminalRuleCall_1_2_0_0_1 = (RuleCall)cAllComponentsComponentCrossReference_1_2_0_0.eContents().get(1);
		private final Keyword cCommaKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAnyOfKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Assignment cAnyComponentsAssignment_2_2_0 = (Assignment)cGroup_2_2.eContents().get(0);
		private final CrossReference cAnyComponentsComponentCrossReference_2_2_0_0 = (CrossReference)cAnyComponentsAssignment_2_2_0.eContents().get(0);
		private final RuleCall cAnyComponentsComponentIDTerminalRuleCall_2_2_0_0_1 = (RuleCall)cAnyComponentsComponentCrossReference_2_2_0_0.eContents().get(1);
		private final Keyword cCommaKeyword_2_2_1 = (Keyword)cGroup_2_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cNoneOfKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Assignment cNoneComponentsAssignment_3_2_0 = (Assignment)cGroup_3_2.eContents().get(0);
		private final CrossReference cNoneComponentsComponentCrossReference_3_2_0_0 = (CrossReference)cNoneComponentsAssignment_3_2_0.eContents().get(0);
		private final RuleCall cNoneComponentsComponentIDTerminalRuleCall_3_2_0_0_1 = (RuleCall)cNoneComponentsComponentCrossReference_3_2_0_0.eContents().get(1);
		private final Keyword cCommaKeyword_3_2_1 = (Keyword)cGroup_3_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		
		//MatcherRule:
		//	{MatcherRule} ('allOf' '(' (allComponents+=[Component] ','?)+ ')')? ('anyOf' '(' (anyComponents+=[Component] ','?)+
		//	')')? ('noneOf' '(' (noneComponents+=[Component] ','?)+ ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{MatcherRule} ('allOf' '(' (allComponents+=[Component] ','?)+ ')')? ('anyOf' '(' (anyComponents+=[Component] ','?)+
		//')')? ('noneOf' '(' (noneComponents+=[Component] ','?)+ ')')?
		public Group getGroup() { return cGroup; }
		
		//{MatcherRule}
		public Action getMatcherRuleAction_0() { return cMatcherRuleAction_0; }
		
		//('allOf' '(' (allComponents+=[Component] ','?)+ ')')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'allOf'
		public Keyword getAllOfKeyword_1_0() { return cAllOfKeyword_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//(allComponents+=[Component] ','?)+
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//allComponents+=[Component]
		public Assignment getAllComponentsAssignment_1_2_0() { return cAllComponentsAssignment_1_2_0; }
		
		//[Component]
		public CrossReference getAllComponentsComponentCrossReference_1_2_0_0() { return cAllComponentsComponentCrossReference_1_2_0_0; }
		
		//ID
		public RuleCall getAllComponentsComponentIDTerminalRuleCall_1_2_0_0_1() { return cAllComponentsComponentIDTerminalRuleCall_1_2_0_0_1; }
		
		//','?
		public Keyword getCommaKeyword_1_2_1() { return cCommaKeyword_1_2_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
		
		//('anyOf' '(' (anyComponents+=[Component] ','?)+ ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'anyOf'
		public Keyword getAnyOfKeyword_2_0() { return cAnyOfKeyword_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_1() { return cLeftParenthesisKeyword_2_1; }
		
		//(anyComponents+=[Component] ','?)+
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//anyComponents+=[Component]
		public Assignment getAnyComponentsAssignment_2_2_0() { return cAnyComponentsAssignment_2_2_0; }
		
		//[Component]
		public CrossReference getAnyComponentsComponentCrossReference_2_2_0_0() { return cAnyComponentsComponentCrossReference_2_2_0_0; }
		
		//ID
		public RuleCall getAnyComponentsComponentIDTerminalRuleCall_2_2_0_0_1() { return cAnyComponentsComponentIDTerminalRuleCall_2_2_0_0_1; }
		
		//','?
		public Keyword getCommaKeyword_2_2_1() { return cCommaKeyword_2_2_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
		
		//('noneOf' '(' (noneComponents+=[Component] ','?)+ ')')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'noneOf'
		public Keyword getNoneOfKeyword_3_0() { return cNoneOfKeyword_3_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_1() { return cLeftParenthesisKeyword_3_1; }
		
		//(noneComponents+=[Component] ','?)+
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//noneComponents+=[Component]
		public Assignment getNoneComponentsAssignment_3_2_0() { return cNoneComponentsAssignment_3_2_0; }
		
		//[Component]
		public CrossReference getNoneComponentsComponentCrossReference_3_2_0_0() { return cNoneComponentsComponentCrossReference_3_2_0_0; }
		
		//ID
		public RuleCall getNoneComponentsComponentIDTerminalRuleCall_3_2_0_0_1() { return cNoneComponentsComponentIDTerminalRuleCall_3_2_0_0_1; }
		
		//','?
		public Keyword getCommaKeyword_3_2_1() { return cCommaKeyword_3_2_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }
	}
	public class ContextScopeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.entitas.lang.DSL.ContextScope");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReferenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cReferenceContextIdCrossReference_1_0 = (CrossReference)cReferenceAssignment_1.eContents().get(0);
		private final RuleCall cReferenceContextIdIDTerminalRuleCall_1_0_1 = (RuleCall)cReferenceContextIdCrossReference_1_0.eContents().get(1);
		
		//ContextScope:
		//	'in' reference=[ContextId];
		@Override public ParserRule getRule() { return rule; }
		
		//'in' reference=[ContextId]
		public Group getGroup() { return cGroup; }
		
		//'in'
		public Keyword getInKeyword_0() { return cInKeyword_0; }
		
		//reference=[ContextId]
		public Assignment getReferenceAssignment_1() { return cReferenceAssignment_1; }
		
		//[ContextId]
		public CrossReference getReferenceContextIdCrossReference_1_0() { return cReferenceContextIdCrossReference_1_0; }
		
		//ID
		public RuleCall getReferenceContextIdIDTerminalRuleCall_1_0_1() { return cReferenceContextIdIDTerminalRuleCall_1_0_1; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.entitas.lang.DSL.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cValidIDParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cValidIDParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ValidID ('.' ValidID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ValidID ('.' ValidID)*
		public Group getGroup() { return cGroup; }
		
		//ValidID
		public RuleCall getValidIDParserRuleCall_0() { return cValidIDParserRuleCall_0; }
		
		//('.' ValidID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ValidID
		public RuleCall getValidIDParserRuleCall_1_1() { return cValidIDParserRuleCall_1_1; }
	}
	public class ValidIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.entitas.lang.DSL.ValidID");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cTargetKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cNamespaceKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cDefaultKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cUniqueKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cPrefixKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cInKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cAliasKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		
		//ValidID:
		//	ID | 'target' | 'namespace' | 'default' | 'unique' | 'prefix' | 'in' | 'alias';
		@Override public ParserRule getRule() { return rule; }
		
		//ID | 'target' | 'namespace' | 'default' | 'unique' | 'prefix' | 'in' | 'alias'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//'target'
		public Keyword getTargetKeyword_1() { return cTargetKeyword_1; }
		
		//'namespace'
		public Keyword getNamespaceKeyword_2() { return cNamespaceKeyword_2; }
		
		//'default'
		public Keyword getDefaultKeyword_3() { return cDefaultKeyword_3; }
		
		//'unique'
		public Keyword getUniqueKeyword_4() { return cUniqueKeyword_4; }
		
		//'prefix'
		public Keyword getPrefixKeyword_5() { return cPrefixKeyword_5; }
		
		//'in'
		public Keyword getInKeyword_6() { return cInKeyword_6; }
		
		//'alias'
		public Keyword getAliasKeyword_7() { return cAliasKeyword_7; }
	}
	
	
	private final RootElements pRoot;
	private final TargetElements pTarget;
	private final TargetIdElements pTargetId;
	private final TargetParameterElements pTargetParameter;
	private final VersionElements pVersion;
	private final NamespaceElements pNamespace;
	private final ContextElements pContext;
	private final ContextIdElements pContextId;
	private final ContextParameterElements pContextParameter;
	private final AliasElements pAlias;
	private final AliasListElements pAliasList;
	private final AliasRuleElements pAliasRule;
	private final SingleAliasElements pSingleAlias;
	private final ComponentElements pComponent;
	private final PropertyListElements pPropertyList;
	private final PropertyRulesElements pPropertyRules;
	private final PropertyPrefixElements pPropertyPrefix;
	private final ComponentParameterElements pComponentParameter;
	private final ContextScopesElements pContextScopes;
	private final SystemElements pSystem;
	private final AccessRuleElements pAccessRule;
	private final SystemParameterElements pSystemParameter;
	private final TriggerRuleElements pTriggerRule;
	private final MatcherRuleElements pMatcherRule;
	private final ContextScopeElements pContextScope;
	private final QualifiedNameElements pQualifiedName;
	private final ValidIDElements pValidID;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DSLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pRoot = new RootElements();
		this.pTarget = new TargetElements();
		this.pTargetId = new TargetIdElements();
		this.pTargetParameter = new TargetParameterElements();
		this.pVersion = new VersionElements();
		this.pNamespace = new NamespaceElements();
		this.pContext = new ContextElements();
		this.pContextId = new ContextIdElements();
		this.pContextParameter = new ContextParameterElements();
		this.pAlias = new AliasElements();
		this.pAliasList = new AliasListElements();
		this.pAliasRule = new AliasRuleElements();
		this.pSingleAlias = new SingleAliasElements();
		this.pComponent = new ComponentElements();
		this.pPropertyList = new PropertyListElements();
		this.pPropertyRules = new PropertyRulesElements();
		this.pPropertyPrefix = new PropertyPrefixElements();
		this.pComponentParameter = new ComponentParameterElements();
		this.pContextScopes = new ContextScopesElements();
		this.pSystem = new SystemElements();
		this.pAccessRule = new AccessRuleElements();
		this.pSystemParameter = new SystemParameterElements();
		this.pTriggerRule = new TriggerRuleElements();
		this.pMatcherRule = new MatcherRuleElements();
		this.pContextScope = new ContextScopeElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pValidID = new ValidIDElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("io.entitas.lang.DSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Root:
	//	target=Target?
	//	namespace=Namespace?
	//	context=Context?
	//	typeAliases+=Alias*
	//	components+=Component*
	//	systems+=System*;
	public RootElements getRootAccess() {
		return pRoot;
	}
	
	public ParserRule getRootRule() {
		return getRootAccess().getRule();
	}
	
	//Target:
	//	'target' (ids+=TargetId ','?)+;
	public TargetElements getTargetAccess() {
		return pTarget;
	}
	
	public ParserRule getTargetRule() {
		return getTargetAccess().getRule();
	}
	
	//TargetId:
	//	name=ID ('(' parameters+=TargetParameter ','? ')')? version=Version?;
	public TargetIdElements getTargetIdAccess() {
		return pTargetId;
	}
	
	public ParserRule getTargetIdRule() {
		return getTargetIdAccess().getRule();
	}
	
	//TargetParameter:
	//	'gen_path' ':' path=STRING;
	public TargetParameterElements getTargetParameterAccess() {
		return pTargetParameter;
	}
	
	public ParserRule getTargetParameterRule() {
		return getTargetParameterAccess().getRule();
	}
	
	//Version:
	//	{Version} major=INT ('.' minor=INT ('.' patch=INT)?)?;
	public VersionElements getVersionAccess() {
		return pVersion;
	}
	
	public ParserRule getVersionRule() {
		return getVersionAccess().getRule();
	}
	
	//Namespace:
	//	'namespace' name=QualifiedName;
	public NamespaceElements getNamespaceAccess() {
		return pNamespace;
	}
	
	public ParserRule getNamespaceRule() {
		return getNamespaceAccess().getRule();
	}
	
	//Context:
	//	'context' (ids+=ContextId ','?)+;
	public ContextElements getContextAccess() {
		return pContext;
	}
	
	public ParserRule getContextRule() {
		return getContextAccess().getRule();
	}
	
	//ContextId:
	//	name=ID ('(' parameters+=ContextParameter ','? ')')?;
	public ContextIdElements getContextIdAccess() {
		return pContextId;
	}
	
	public ParserRule getContextIdRule() {
		return getContextIdAccess().getRule();
	}
	
	//ContextParameter:
	//	'default';
	public ContextParameterElements getContextParameterAccess() {
		return pContextParameter;
	}
	
	public ParserRule getContextParameterRule() {
		return getContextParameterAccess().getRule();
	}
	
	//Alias:
	//	'alias' name=ID (listOfAliases=AliasList | singleAlias=SingleAlias);
	public AliasElements getAliasAccess() {
		return pAlias;
	}
	
	public ParserRule getAliasRule() {
		return getAliasAccess().getRule();
	}
	
	//AliasList:
	//	rules+=AliasRule+;
	public AliasListElements getAliasListAccess() {
		return pAliasList;
	}
	
	public ParserRule getAliasListRule() {
		return getAliasListAccess().getRule();
	}
	
	//AliasRule:
	//	target=[TargetId] ':' typeAlias=STRING;
	public AliasRuleElements getAliasRuleAccess() {
		return pAliasRule;
	}
	
	public ParserRule getAliasRuleRule() {
		return getAliasRuleAccess().getRule();
	}
	
	//SingleAlias:
	//	':' typeAlias=STRING;
	public SingleAliasElements getSingleAliasAccess() {
		return pSingleAlias;
	}
	
	public ParserRule getSingleAliasRule() {
		return getSingleAliasAccess().getRule();
	}
	
	//Component:
	//	'comp' name=ValidID ('(' (parameters+=ComponentParameter ','?)+ ')')? scope=ContextScopes?
	//	(listOfProperties=PropertyList | propertyPrefix=PropertyPrefix)?;
	public ComponentElements getComponentAccess() {
		return pComponent;
	}
	
	public ParserRule getComponentRule() {
		return getComponentAccess().getRule();
	}
	
	//PropertyList:
	//	rules+=PropertyRules+;
	public PropertyListElements getPropertyListAccess() {
		return pPropertyList;
	}
	
	public ParserRule getPropertyListRule() {
		return getPropertyListAccess().getRule();
	}
	
	//PropertyRules:
	//	name=ID ':' alias=[Alias] ','?;
	public PropertyRulesElements getPropertyRulesAccess() {
		return pPropertyRules;
	}
	
	public ParserRule getPropertyRulesRule() {
		return getPropertyRulesAccess().getRule();
	}
	
	//PropertyPrefix:
	//	'prefix' '(' string=STRING ')';
	public PropertyPrefixElements getPropertyPrefixAccess() {
		return pPropertyPrefix;
	}
	
	public ParserRule getPropertyPrefixRule() {
		return getPropertyPrefixAccess().getRule();
	}
	
	//ComponentParameter:
	//	'unique';
	public ComponentParameterElements getComponentParameterAccess() {
		return pComponentParameter;
	}
	
	public ParserRule getComponentParameterRule() {
		return getComponentParameterAccess().getRule();
	}
	
	//ContextScopes:
	//	'in' (references+=[ContextId] ','?)+;
	public ContextScopesElements getContextScopesAccess() {
		return pContextScopes;
	}
	
	public ParserRule getContextScopesRule() {
		return getContextScopesAccess().getRule();
	}
	
	//System:
	//	'sys' name=ID ('(' (parameters+=SystemParameter ','?)+ ')')? (reactive?='trigger' scope=ContextScope? ':'
	//	(triggerRules+=TriggerRule ','?)+ (noFilter?='noFilter' |
	//	'filter' matcherRules=MatcherRule)?)? ('access' ':'
	//	accessRules+=AccessRule+)?;
	public SystemElements getSystemAccess() {
		return pSystem;
	}
	
	public ParserRule getSystemRule() {
		return getSystemAccess().getRule();
	}
	
	//AccessRule:
	//	name=ID ':' (matcherRule=MatcherRule scope=ContextScope? | contextRef=[ContextId]);
	public AccessRuleElements getAccessRuleAccess() {
		return pAccessRule;
	}
	
	public ParserRule getAccessRuleRule() {
		return getAccessRuleAccess().getRule();
	}
	
	//SystemParameter:
	//	'init' | 'cleanup' | 'teardown' | 'no_exec' | 'explicit_context_list';
	public SystemParameterElements getSystemParameterAccess() {
		return pSystemParameter;
	}
	
	public ParserRule getSystemParameterRule() {
		return getSystemParameterAccess().getRule();
	}
	
	//TriggerRule:
	//	(removed?='removed' | added?='added' | removedOrAdded?='removedOrAdded') '(' (components+=[Component] ','?)+ ')';
	public TriggerRuleElements getTriggerRuleAccess() {
		return pTriggerRule;
	}
	
	public ParserRule getTriggerRuleRule() {
		return getTriggerRuleAccess().getRule();
	}
	
	//MatcherRule:
	//	{MatcherRule} ('allOf' '(' (allComponents+=[Component] ','?)+ ')')? ('anyOf' '(' (anyComponents+=[Component] ','?)+
	//	')')? ('noneOf' '(' (noneComponents+=[Component] ','?)+ ')')?;
	public MatcherRuleElements getMatcherRuleAccess() {
		return pMatcherRule;
	}
	
	public ParserRule getMatcherRuleRule() {
		return getMatcherRuleAccess().getRule();
	}
	
	//ContextScope:
	//	'in' reference=[ContextId];
	public ContextScopeElements getContextScopeAccess() {
		return pContextScope;
	}
	
	public ParserRule getContextScopeRule() {
		return getContextScopeAccess().getRule();
	}
	
	//QualifiedName:
	//	ValidID ('.' ValidID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//ValidID:
	//	ID | 'target' | 'namespace' | 'default' | 'unique' | 'prefix' | 'in' | 'alias';
	public ValidIDElements getValidIDAccess() {
		return pValidID;
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}

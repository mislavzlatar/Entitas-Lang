/**
 * generated by Xtext 2.11.0
 */
package io.entitas.lang.dsl.impl;

import io.entitas.lang.dsl.AccessRule;
import io.entitas.lang.dsl.ContextId;
import io.entitas.lang.dsl.ContextScope;
import io.entitas.lang.dsl.DslPackage;
import io.entitas.lang.dsl.MatcherRule;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Access Rule</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link io.entitas.lang.dsl.impl.AccessRuleImpl#getName <em>Name</em>}</li>
 *   <li>{@link io.entitas.lang.dsl.impl.AccessRuleImpl#getMatcherRule <em>Matcher Rule</em>}</li>
 *   <li>{@link io.entitas.lang.dsl.impl.AccessRuleImpl#getScope <em>Scope</em>}</li>
 *   <li>{@link io.entitas.lang.dsl.impl.AccessRuleImpl#getContextRef <em>Context Ref</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AccessRuleImpl extends MinimalEObjectImpl.Container implements AccessRule
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getMatcherRule() <em>Matcher Rule</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMatcherRule()
   * @generated
   * @ordered
   */
  protected MatcherRule matcherRule;

  /**
   * The cached value of the '{@link #getScope() <em>Scope</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getScope()
   * @generated
   * @ordered
   */
  protected ContextScope scope;

  /**
   * The cached value of the '{@link #getContextRef() <em>Context Ref</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getContextRef()
   * @generated
   * @ordered
   */
  protected ContextId contextRef;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AccessRuleImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DslPackage.Literals.ACCESS_RULE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.ACCESS_RULE__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MatcherRule getMatcherRule()
  {
    return matcherRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMatcherRule(MatcherRule newMatcherRule, NotificationChain msgs)
  {
    MatcherRule oldMatcherRule = matcherRule;
    matcherRule = newMatcherRule;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DslPackage.ACCESS_RULE__MATCHER_RULE, oldMatcherRule, newMatcherRule);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setMatcherRule(MatcherRule newMatcherRule)
  {
    if (newMatcherRule != matcherRule)
    {
      NotificationChain msgs = null;
      if (matcherRule != null)
        msgs = ((InternalEObject)matcherRule).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DslPackage.ACCESS_RULE__MATCHER_RULE, null, msgs);
      if (newMatcherRule != null)
        msgs = ((InternalEObject)newMatcherRule).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DslPackage.ACCESS_RULE__MATCHER_RULE, null, msgs);
      msgs = basicSetMatcherRule(newMatcherRule, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.ACCESS_RULE__MATCHER_RULE, newMatcherRule, newMatcherRule));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ContextScope getScope()
  {
    return scope;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetScope(ContextScope newScope, NotificationChain msgs)
  {
    ContextScope oldScope = scope;
    scope = newScope;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DslPackage.ACCESS_RULE__SCOPE, oldScope, newScope);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setScope(ContextScope newScope)
  {
    if (newScope != scope)
    {
      NotificationChain msgs = null;
      if (scope != null)
        msgs = ((InternalEObject)scope).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DslPackage.ACCESS_RULE__SCOPE, null, msgs);
      if (newScope != null)
        msgs = ((InternalEObject)newScope).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DslPackage.ACCESS_RULE__SCOPE, null, msgs);
      msgs = basicSetScope(newScope, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.ACCESS_RULE__SCOPE, newScope, newScope));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ContextId getContextRef()
  {
    if (contextRef != null && contextRef.eIsProxy())
    {
      InternalEObject oldContextRef = (InternalEObject)contextRef;
      contextRef = (ContextId)eResolveProxy(oldContextRef);
      if (contextRef != oldContextRef)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, DslPackage.ACCESS_RULE__CONTEXT_REF, oldContextRef, contextRef));
      }
    }
    return contextRef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ContextId basicGetContextRef()
  {
    return contextRef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setContextRef(ContextId newContextRef)
  {
    ContextId oldContextRef = contextRef;
    contextRef = newContextRef;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.ACCESS_RULE__CONTEXT_REF, oldContextRef, contextRef));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case DslPackage.ACCESS_RULE__MATCHER_RULE:
        return basicSetMatcherRule(null, msgs);
      case DslPackage.ACCESS_RULE__SCOPE:
        return basicSetScope(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DslPackage.ACCESS_RULE__NAME:
        return getName();
      case DslPackage.ACCESS_RULE__MATCHER_RULE:
        return getMatcherRule();
      case DslPackage.ACCESS_RULE__SCOPE:
        return getScope();
      case DslPackage.ACCESS_RULE__CONTEXT_REF:
        if (resolve) return getContextRef();
        return basicGetContextRef();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DslPackage.ACCESS_RULE__NAME:
        setName((String)newValue);
        return;
      case DslPackage.ACCESS_RULE__MATCHER_RULE:
        setMatcherRule((MatcherRule)newValue);
        return;
      case DslPackage.ACCESS_RULE__SCOPE:
        setScope((ContextScope)newValue);
        return;
      case DslPackage.ACCESS_RULE__CONTEXT_REF:
        setContextRef((ContextId)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DslPackage.ACCESS_RULE__NAME:
        setName(NAME_EDEFAULT);
        return;
      case DslPackage.ACCESS_RULE__MATCHER_RULE:
        setMatcherRule((MatcherRule)null);
        return;
      case DslPackage.ACCESS_RULE__SCOPE:
        setScope((ContextScope)null);
        return;
      case DslPackage.ACCESS_RULE__CONTEXT_REF:
        setContextRef((ContextId)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DslPackage.ACCESS_RULE__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case DslPackage.ACCESS_RULE__MATCHER_RULE:
        return matcherRule != null;
      case DslPackage.ACCESS_RULE__SCOPE:
        return scope != null;
      case DslPackage.ACCESS_RULE__CONTEXT_REF:
        return contextRef != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //AccessRuleImpl

/**
 * generated by Xtext 2.11.0
 */
package io.entitas.lang.dsl.impl;

import io.entitas.lang.dsl.Component;
import io.entitas.lang.dsl.DslPackage;
import io.entitas.lang.dsl.MatcherRule;

import java.util.Collection;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectResolvingEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Matcher Rule</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link io.entitas.lang.dsl.impl.MatcherRuleImpl#getAllComponents <em>All Components</em>}</li>
 *   <li>{@link io.entitas.lang.dsl.impl.MatcherRuleImpl#getAnyComponents <em>Any Components</em>}</li>
 *   <li>{@link io.entitas.lang.dsl.impl.MatcherRuleImpl#getNoneComponents <em>None Components</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MatcherRuleImpl extends MinimalEObjectImpl.Container implements MatcherRule
{
  /**
   * The cached value of the '{@link #getAllComponents() <em>All Components</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAllComponents()
   * @generated
   * @ordered
   */
  protected EList<Component> allComponents;

  /**
   * The cached value of the '{@link #getAnyComponents() <em>Any Components</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAnyComponents()
   * @generated
   * @ordered
   */
  protected EList<Component> anyComponents;

  /**
   * The cached value of the '{@link #getNoneComponents() <em>None Components</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNoneComponents()
   * @generated
   * @ordered
   */
  protected EList<Component> noneComponents;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MatcherRuleImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DslPackage.Literals.MATCHER_RULE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Component> getAllComponents()
  {
    if (allComponents == null)
    {
      allComponents = new EObjectResolvingEList<Component>(Component.class, this, DslPackage.MATCHER_RULE__ALL_COMPONENTS);
    }
    return allComponents;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Component> getAnyComponents()
  {
    if (anyComponents == null)
    {
      anyComponents = new EObjectResolvingEList<Component>(Component.class, this, DslPackage.MATCHER_RULE__ANY_COMPONENTS);
    }
    return anyComponents;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Component> getNoneComponents()
  {
    if (noneComponents == null)
    {
      noneComponents = new EObjectResolvingEList<Component>(Component.class, this, DslPackage.MATCHER_RULE__NONE_COMPONENTS);
    }
    return noneComponents;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DslPackage.MATCHER_RULE__ALL_COMPONENTS:
        return getAllComponents();
      case DslPackage.MATCHER_RULE__ANY_COMPONENTS:
        return getAnyComponents();
      case DslPackage.MATCHER_RULE__NONE_COMPONENTS:
        return getNoneComponents();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DslPackage.MATCHER_RULE__ALL_COMPONENTS:
        getAllComponents().clear();
        getAllComponents().addAll((Collection<? extends Component>)newValue);
        return;
      case DslPackage.MATCHER_RULE__ANY_COMPONENTS:
        getAnyComponents().clear();
        getAnyComponents().addAll((Collection<? extends Component>)newValue);
        return;
      case DslPackage.MATCHER_RULE__NONE_COMPONENTS:
        getNoneComponents().clear();
        getNoneComponents().addAll((Collection<? extends Component>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DslPackage.MATCHER_RULE__ALL_COMPONENTS:
        getAllComponents().clear();
        return;
      case DslPackage.MATCHER_RULE__ANY_COMPONENTS:
        getAnyComponents().clear();
        return;
      case DslPackage.MATCHER_RULE__NONE_COMPONENTS:
        getNoneComponents().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DslPackage.MATCHER_RULE__ALL_COMPONENTS:
        return allComponents != null && !allComponents.isEmpty();
      case DslPackage.MATCHER_RULE__ANY_COMPONENTS:
        return anyComponents != null && !anyComponents.isEmpty();
      case DslPackage.MATCHER_RULE__NONE_COMPONENTS:
        return noneComponents != null && !noneComponents.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //MatcherRuleImpl

/**
 * generated by Xtext 2.11.0
 */
package io.entitas.lang.dsl.impl;

import io.entitas.lang.dsl.Component;
import io.entitas.lang.dsl.DslPackage;
import io.entitas.lang.dsl.TriggerRule;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectResolvingEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Trigger Rule</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link io.entitas.lang.dsl.impl.TriggerRuleImpl#isRemoved <em>Removed</em>}</li>
 *   <li>{@link io.entitas.lang.dsl.impl.TriggerRuleImpl#isAdded <em>Added</em>}</li>
 *   <li>{@link io.entitas.lang.dsl.impl.TriggerRuleImpl#isRemovedOrAdded <em>Removed Or Added</em>}</li>
 *   <li>{@link io.entitas.lang.dsl.impl.TriggerRuleImpl#getComponents <em>Components</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TriggerRuleImpl extends MinimalEObjectImpl.Container implements TriggerRule
{
  /**
   * The default value of the '{@link #isRemoved() <em>Removed</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isRemoved()
   * @generated
   * @ordered
   */
  protected static final boolean REMOVED_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isRemoved() <em>Removed</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isRemoved()
   * @generated
   * @ordered
   */
  protected boolean removed = REMOVED_EDEFAULT;

  /**
   * The default value of the '{@link #isAdded() <em>Added</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isAdded()
   * @generated
   * @ordered
   */
  protected static final boolean ADDED_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isAdded() <em>Added</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isAdded()
   * @generated
   * @ordered
   */
  protected boolean added = ADDED_EDEFAULT;

  /**
   * The default value of the '{@link #isRemovedOrAdded() <em>Removed Or Added</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isRemovedOrAdded()
   * @generated
   * @ordered
   */
  protected static final boolean REMOVED_OR_ADDED_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isRemovedOrAdded() <em>Removed Or Added</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isRemovedOrAdded()
   * @generated
   * @ordered
   */
  protected boolean removedOrAdded = REMOVED_OR_ADDED_EDEFAULT;

  /**
   * The cached value of the '{@link #getComponents() <em>Components</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComponents()
   * @generated
   * @ordered
   */
  protected EList<Component> components;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TriggerRuleImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DslPackage.Literals.TRIGGER_RULE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isRemoved()
  {
    return removed;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRemoved(boolean newRemoved)
  {
    boolean oldRemoved = removed;
    removed = newRemoved;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.TRIGGER_RULE__REMOVED, oldRemoved, removed));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isAdded()
  {
    return added;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAdded(boolean newAdded)
  {
    boolean oldAdded = added;
    added = newAdded;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.TRIGGER_RULE__ADDED, oldAdded, added));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isRemovedOrAdded()
  {
    return removedOrAdded;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRemovedOrAdded(boolean newRemovedOrAdded)
  {
    boolean oldRemovedOrAdded = removedOrAdded;
    removedOrAdded = newRemovedOrAdded;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.TRIGGER_RULE__REMOVED_OR_ADDED, oldRemovedOrAdded, removedOrAdded));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Component> getComponents()
  {
    if (components == null)
    {
      components = new EObjectResolvingEList<Component>(Component.class, this, DslPackage.TRIGGER_RULE__COMPONENTS);
    }
    return components;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DslPackage.TRIGGER_RULE__REMOVED:
        return isRemoved();
      case DslPackage.TRIGGER_RULE__ADDED:
        return isAdded();
      case DslPackage.TRIGGER_RULE__REMOVED_OR_ADDED:
        return isRemovedOrAdded();
      case DslPackage.TRIGGER_RULE__COMPONENTS:
        return getComponents();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DslPackage.TRIGGER_RULE__REMOVED:
        setRemoved((Boolean)newValue);
        return;
      case DslPackage.TRIGGER_RULE__ADDED:
        setAdded((Boolean)newValue);
        return;
      case DslPackage.TRIGGER_RULE__REMOVED_OR_ADDED:
        setRemovedOrAdded((Boolean)newValue);
        return;
      case DslPackage.TRIGGER_RULE__COMPONENTS:
        getComponents().clear();
        getComponents().addAll((Collection<? extends Component>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DslPackage.TRIGGER_RULE__REMOVED:
        setRemoved(REMOVED_EDEFAULT);
        return;
      case DslPackage.TRIGGER_RULE__ADDED:
        setAdded(ADDED_EDEFAULT);
        return;
      case DslPackage.TRIGGER_RULE__REMOVED_OR_ADDED:
        setRemovedOrAdded(REMOVED_OR_ADDED_EDEFAULT);
        return;
      case DslPackage.TRIGGER_RULE__COMPONENTS:
        getComponents().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DslPackage.TRIGGER_RULE__REMOVED:
        return removed != REMOVED_EDEFAULT;
      case DslPackage.TRIGGER_RULE__ADDED:
        return added != ADDED_EDEFAULT;
      case DslPackage.TRIGGER_RULE__REMOVED_OR_ADDED:
        return removedOrAdded != REMOVED_OR_ADDED_EDEFAULT;
      case DslPackage.TRIGGER_RULE__COMPONENTS:
        return components != null && !components.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (removed: ");
    result.append(removed);
    result.append(", added: ");
    result.append(added);
    result.append(", removedOrAdded: ");
    result.append(removedOrAdded);
    result.append(')');
    return result.toString();
  }

} //TriggerRuleImpl
